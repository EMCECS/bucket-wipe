/**
 * Copyright 2016-2019 Dell Inc. or its subsidiaries.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
group 'com.emc.tools'
version '1.10'
ext.mainClass = 'com.emc.ecs.tool.BucketWipe'

buildscript {
    repositories {
        jcenter {
            url "https://jcenter.bintray.com/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'com.github.johnrengelman.shadow'

defaultTasks 'distZip'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.emc.ecs:object-client:3.1.1',
            'com.emc.ecs:atmos-client:3.1.0',
            'commons-cli:commons-cli:1.3.1'
    compile group: 'org.jgrapht', name: 'jgrapht-ext', version:'1.3.0'           
    testCompile 'junit:junit:4.12'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

javadoc {
    options.quiet()
}

shadowJar {
   doFirst {
        classifier ''
        manifest {
            attributes 'Main-Class': mainClass,
                    'Implementation-Version': version,
                    'Class-Path': { configurations.runtime.collect { it.getName() }.join(' ') }
        }
        mergeServiceFiles()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from "${docsDir}/javadoc"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

distributions {
    main {
        contents {
            from('.') {
                include '*.txt'
            }
            into('3rd-party-licenses') {
                from '3rd-party-licenses'
            }
            from shadowJar
            into('doc') {
                from javadocJar
            }
            into('src') {
                from sourcesJar
            }
        }
    }
}

